#!/bin/bash
###############################################################################
#
#   xadf
#   Copyright (C) 2023  Hendrik Lie
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#   Author: Hendrik Lie
#   Email : <hendriklie@gmail.com>
#
###############################################################################
#
# SUMMARY
# This is essentially our dotfiles repo controller. It can also function as an
# installer script: downloading the entire repo, sets up alias, append source
# directive to .bashrc, and syncs all contents from dotfiles to $HOME. When
# called, it can also function as an alias for git with separate home dir,
# where the git directory is set at either $HOME/xadf or somewhere that is
# specified with --seat at install time.
#
###############################################################################
#
# A bash script to control and manage xa-dotfiles (xadf) in a home folder with
# bare git methods. When called without its native arguments, act as an alias
# of git --git-dir=$xadfdir --work-tree=$HOME
#
###############################################################################

# Define state variables
version=v1.21.20230315.1810+reusable_git_func
vanilla_xadf=0
build_recipe=0
build_xadfrc=0
touch_bashrc=0
init_bare=0
install_mode=0
install_seat="$HOME/xadf"
install_branch="trunk"
xadf_clone_url="https://gitlab.com/heno72/xadf.git"
xadf_set_url="git@gitlab.com:heno72/xadf.git"
set_origin_url=0

# Make necessary directories
test ! -d ~/.config/xadf && mkdir -p ~/.config/xadf
test ! -d ~/.local/xadf && mkdir -p ~/.local/xadf

xadf_build_recipe(){
# builds recipe
printf "===> [xadf]: Generate recipe...\n"
cp ~/.local/xadf/templates/default-recipe.txt ~/.config/xadf/recipe.txt
if test $? -gt 0
then
	printf "===> [xadf]: FAIL\n"
	exit 4
else
	printf "===> [xadf]: DONE\n"
fi
}

xadf_build_xadfrc(){
# builds xadfrc
printf "===> [xadf]: Generate xadfrc...\n"
sed "s#XADFDIR#$install_seat#;s#$HOME#\$HOME#" ~/.local/xadf/templates/template-xadfrc > ~/.config/xadf/xadfrc
if test $? -gt 0
then
	printf "===> [xadf]: FAIL\n"
	exit 5
else
	printf "===> [xadf]: DONE\n"
fi
}

xadf_touch_bashrc(){
# 9. If .bashrc does not contain . ~/.config/xadf/xadfrc, appends that
#    line to the end of ~/.bashrc. Note that it should at first strip all
#    comments off by piping to sed (does not modify .bashrc) and then
#    performs grep search
printf "===> [xadf]: Ensures xadfrc is sourced in ~/.bashrc...\n"
sed 's/#.*$//' ~/.bashrc|grep "^. ~/\.config/xadf/xadfrc$" > /dev/null
test $? -gt 0 && printf ". ~/.config/xadf/xadfrc\n" >> ~/.bashrc
if test $? -gt 0
then
	printf "===> [xadf]: xadfrc is already sourced...OK\n"
else
	printf "===> [xadf]: xadfrc is appended to ~/.bashrc...DONE\n"
fi
}

xadf_init_bare(){
	printf "===> [xadf]: Initialize a bare directory at '%s'\n" "$install_seat"
	git init --bare "$install_seat"
	if test $? -gt 0
	then
		printf >&2 "===> [xadf]: Failed to initialize a bare directory at '%s'\n" "$install_seat"
		exit 15
	else
		printf "===> [xadf]: Initialize a bare directory at '%s'...OK\n" "$install_seat"
	fi
}

xadf_custom_install(){
printf "===> [xadf]: Sets up xadf configuration to load from a non-xadf based repository at '%s'\n" "$install_seat"
printf "===> [xadf]: Updates xadfrc\n"
xadf_build_xadfrc
printf "===> [xadf]: Ensures recipe.txt is present\n"
test ! -d ~/.config/xadf/recipe.txt && xadf_build_recipe
printf "===> [xadf]: Touching ~/.bashrc\n"
xadf_touch_bashrc
printf "===> [xadf]: You may want to source your ~/.bashrc\n"
printf "===> [xadf]: Afterwards you may want to hide untracked files with:\n"
printf "===> [xadf]:   xadf config status.showUntrackedFiles no\n"
}

xadf_minimal_test(){
# Checkpoint, if either one of them does not exist, it is a failed download.
if test ! -f ~/.local/xadf/templates/bash_aliases || \
   test ! -f ~/.local/xadf/templates/bash_functions || \
   test ! -f ~/.local/xadf/templates/default-recipe.txt || \
   test ! -f ~/.local/xadf/templates/template-xadfrc
then
	printf "===> [xadf]: WARNING! It is likely that one of the downloads has failed. Please try again.\n" >&2
	exit 17
fi

# Tells user that download is completed and what to do afterwards
printf "===> [xadf]: Download completed! You may want to check if ~/.local/bin is in your path. If it isn't, you can do:\n"
printf "===> [xadf]:   PATH=\"~/.local/bin:\$PATH\""
printf "===> [xadf]: Afterwards you may want to initialize a bare git repository with:\n"
printf "===> [xadf]:   xadf --init-bare [--seat DIR]\n"
printf "===> [xadf]:   xadf --custom-install [--seat DIR]\n"
printf "===> [xadf]: Or download from your existing dotfiles repo and set xadf as its manager with:\n"
printf "===> [xadf]:   xadf -i -s URL [--seat DIR] [-b BRANCH]\n"
}

xadf_curl_download(){
# A dirty hack: check if the download is a success. If it fails, it is likely that a wrong branch
# is specified with --seat
curl -o ~/.local/bin/xadf https://gitlab.com/heno72/xadf/-/raw/${install_branch}/.local/bin/xadf
if test $? -gt 0
then
	printf "===> [xadf]: WARNING! File not found! Aborting...\n" >&2
	printf "===> [xadf]: WARNING! You may either try running without '--branch/b' option or try using '--branch development'\n" >&2
	exit 16
else
	printf "===> [xadf]: Make xadf binary executable\n"
	chmod +x ~/.local/bin/xadf
	# Download supporting files required to create basic configuration
	printf "===> [xadf]: Download required files...\n"
	for file in bash_aliases bash_functions default-recipe.txt template-xadfrc
	do
		curl -o ~/.local/xadf/templates/${file} \
		https://gitlab.com/heno72/xadf/-/raw/${install_branch}/.local/xadf/templates/${file}
	done

	# Checkpoint, if either one of them does not exist, it is a failed download.
	xadf_minimal_test
fi
}

xadf_wget_download(){
# A dirty hack: check if the download is a success. If it fails, it is likely that a wrong branch
# is specified with --seat
wget -O ~/.local/bin/xadf https://gitlab.com/heno72/xadf/-/raw/${install_branch}/.local/bin/xadf
if test $? -gt 0
then
	printf "===> [xadf]: WARNING! File not found! Aborting...\n" >&2
	printf "===> [xadf]: WARNING! You may either try running without '--branch/b' option or try using '--branch development'\n" >&2
	exit 18
else
	printf "===> [xadf]: Make xadf binary executable\n"
	chmod +x ~/.local/bin/xadf
	# Download supporting files required to create basic configuration
	printf "===> [xadf]: Download required files...\n"
	for file in bash_aliases bash_functions default-recipe.txt template-xadfrc
	do
		wget -O ~/.local/xadf/templates/${file} \
		https://gitlab.com/heno72/xadf/-/raw/${install_branch}/.local/xadf/templates/${file}
	done

	# Checkpoint, if either one of them does not exist, it is a failed download.
	xadf_minimal_test
fi
}

xadf_minimal_install(){
printf "===> [xadf]: WARNING! Will only obtain most required files for proper functioning of xadf\n"
# Create required directories
printf "===> [xadf]: Recreate basic required directory structures\n"
mkdir -p ~/.local/{bin,xadf} ~/.local/xadf/templates

# Download the latest version of xadf binary
printf "===> [xadf]: Obtain the latest xadf binary from branch '%s'\n" "$install_branch"
printf "===> [xadf]: For security reasons, the link is hardcoded except for branch\n"

# If wget exists, use wget
# Otherwise try curl
# Otherwise scream
if which wget > /dev/null;
then
  xadf_wget_download
elif which curl > /dev/null;
then
  xadf_curl_download
else
  printf "===> [xadf]: WARNING! Neither wget or curl exists!\n"
  printf "===> [xadf]: Please install either one of them. Aborting...\n"
  exit 20
fi
}

xadf_clone_source(){
# 1. Replicate from xadf git repository with separate git configuration.
#    It will also specify a temporary location $HOME/.xadf-tmp to store
#    all contents of the repo. If --seat is set, replicate git directory
#    to the specified location. Otherwise, replicate git directory to
#    $HOME/xadf
printf "===> [xadf]: Clone from repo '%s'...\n" "$xadf_clone_url"
git clone --separate-git-dir="$install_seat" "$xadf_clone_url" ~/.xadf-tmp
if test $? -gt 0
then
	printf "===> [xadf]: FAIL! cleaning up...\n"
	rm -rf "$install_seat" "$HOME/.xadf-tmp"
	exit 6
else
	printf "===> [xadf]: DONE\n"
fi

# 2. Switch working directory to temporary working directory
printf "===> [xadf]: Switch working directory to '~/.xadf-tmp'...\n"
pushd ~/.xadf-tmp > /dev/null
if test $? -gt 0
then
	printf "===> [xadf]: FAIL\n"
	exit 7
else
	printf "===> [xadf]: DONE, working directory is '%s'\n" "$PWD"
fi

# 3. If --branch is set, checks out to branch NAME
printf "===> [xadf]: Checks out to branch '%s'...\n" "$install_branch"
# right now our working directory is ~/.xadf-tmp
git --git-dir="$install_seat" --work-tree="$HOME/.xadf-tmp" checkout "$install_branch"
if test $? -gt 0
then
	printf "===> [xadf]: FAIL! cleaning up...\n"
	rm -rf "$install_seat" "$HOME/.xadf-tmp"
	exit 8
else
	# right now our working directory is ~/.xadf-tmp
	printf "===> [xadf]: "
	git --git-dir="$install_seat" --work-tree="$HOME/.xadf-tmp" status -bs
fi

# 4. rsync all contents of $HOME/.xadf-tmp/ except '.git' to $HOME
printf "===> [xadf]: Syncing repo to '%s'...\n" "$HOME"
rsync --recursive --verbose --exclude '.git' "$HOME/.xadf-tmp/" "$HOME/"
# if test $? -gt 0
# then
#	printf "===> [xadf]: FAIL\n"
#	exit 9
#else
#	printf "===> [xadf]: DONE\n"
#fi

# 5. Removes $HOME/.xadf-tmp/
printf "===> [xadf]: Returns to '%s'...\n" "$HOME"
popd > /dev/null
if test $? -gt 0
then
	printf "===> [xadf]: FAIL\n"
	exit 10
else
	printf "===> [xadf]: DONE, working directory is '%s'\n" "$PWD"
fi

printf "===> [xadf]: Deletes temporary working directory '~/.xadf-tmp'...\n"
rm -rf "$HOME/.xadf-tmp"
if test $? -gt 0
then
	printf "===> [xadf]: FAIL\n"
	exit 11
else
	printf "===> [xadf]: DONE\n"
fi
}

xadf_install(){
# installs xadf
printf "===> [xadf]: installing xadf\n"
printf "===> [xadf]: seat is '%s'\n" "$install_seat"
printf "===> [xadf]: branch is '%s'\n" "$install_branch"

# Step 1-5 is replaced with:
xadf_clone_source

# 6. Make untracked files not shown: xadf config status.showUntrackedFiles no
printf "===> [xadf]: Makes untracked file not shown...\n"
git --git-dir="$install_seat" --work-tree="$HOME" config status.showUntrackedFiles no
if test $? -gt 0
then
	printf "===> [xadf]: FAIL\n"
	exit 12
else
	printf "===> [xadf]: DONE\n"
fi

# 7. Check if .bashrc exists. If exists, go to 9, else go to 8
# 8. Copy from /etc/skel/.bashrc to ~/.bashrc, and continue to 10
test ! -f "$HOME/.bashrc" && cp /etc/skel/.bashrc ~/.bashrc

# 9. If .bashrc does not contain . ~/.config/xadf/xadfrc, appends that
#    line to the end of ~/.bashrc. Note that it should at first strip all
#    comments off by piping to sed (does not modify .bashrc) and then
#    performs grep search
xadf_touch_bashrc && export touch_bashrc=0

# 10. Builds xadfrc from $xadfmods/template-xadfrc with xadf -x (honors --seat option)
test ! -f ~/.config/xadfrc && xadf_build_xadfrc && export build_xadfrc=0
# 11. If no recipe.txt is present, builds recipe.txt with xadf -r
test ! -f ~/.config/recipe.txt && xadf_build_recipe && export build_recipe=0

printf "===> [xadf]: Installation of xadf is completed, checked out branch is '%s'\n" "$install_branch"
printf "===> [xadf]: You may want to source your ~/.bashrc\n"
}

xadf_touch_origin(){
	if test -n "$xadfdir"
	then # xadfdir is set, xadf will call itself as an alias
		xadf remote set-url origin $xadf_set_url
	else # is set in installation, will call the raw commands
		git --git-dir="$install_seat" --work-tree="$HOME" remote set-url origin $xadf_set_url
	fi
}

xadf_version(){
# prints version, then exit
printf "xadf version %s\n\n" "$version"
}

xadf_show_usage(){
# prints usage text, then exit
xadf -v
cat <<ENDOFFILE
  A bash script to control and manage xa-dotfiles (xadf) in a home
  folder with bare git methods. When called without its native
  arguments, act as an alias of:

    git --git-dir=\$xadfdir --work-tree=\$HOME "\$@"

USAGE

  ~$ xadf -i [install options]
  ~$ xadf [options] [value]
  ~$ xadf [-c DIR] [git commands]

  See 'xadf -h/--help' for a complete list of options.

EXAMPLES

  ~$ xadf -i --seat "\$HOME/.dotfiles"
  --> installs xadf, and sets up git directory for xadf to \$HOME/.dotfiles
      instead of \$HOME/xadf

  ~$ xadf --build-xadfrc --xadf-repo
  --> generates xadfrc and save it to ~/.config/xadf/xadfrc and change upstream
      link to git@gitlab.com:heno72/xadf.git

  ~$ xadf status
  --> an alias for 'git --git-dir=\$xadfdir --work-tree\$HOME status'
      Consider it like 'git status' but with separated git directory and
      work-tree.

  Likewise, the following commands essentially function as a git alias:

  ~$ xadf commit
  ~$ xadf pull
  ~$ xadf push
  ~$ xadf checkout trunk

  Alternatively, you can use '--custom-seat/-c DIR' followed with git commands
  as an alias for a secondary/alternative git repository:

  ~$ xadf --c .secondarygit status
  ~$ xadf --custom-seat ~/.git2 checkout termux

ENDOFFILE
}

xadf_show_help(){
# runs xadf -v
# prints help text, then exit
xadf -v
cat <<ENDOFFILE
  A bash script to control and manage xa-dotfiles (xadf) in a home
  folder with bare git methods. When called without its native
  arguments, act as an alias of:

    git --git-dir=\$xadfdir --work-tree=\$HOME "\$@"

USAGE

  ~$ xadf -i [install options]
  ~$ xadf [options] [value]
  ~$ xadf [-c DIR] [git commands]

  See 'xadf --usage' for more usage examples.

OPTIONS

Normal usage options:
  --list-tracked/-l PATH  Prints all tracked files in PATH or current directory.
                          PATH is relative to repository root.
  --build-recipe/-r       Produces \$xadfconfig/recipe.txt by copying from template.
  --build-xadfrc/-x       Produce \$xadfconfig/xadfrc by constructing from template.
  --touch-bashrc/-t       Modify .bashrc to source xadfrc if it isn't already.
  --init-bare             Initialize a bare git repository at \$HOME.
                          Specify custom git directory with '--seat DIR' option.
  --custom-seat/-c DIR    Sets xadf git directory to DIR, then assumes the following commands are git commands.
                          Useful to use an alternative git directory.
  --set-origin-url/-o URL Changes remote url to the specified URL. Essentially an alias for:
                            xadf remote set-url origin URL
  --xadf-repo             Essentially an alias for:
                            xadf remote set-url origin git@gitlab.com:heno72/xadf.git
                          If you want to use your own git clone url, supply with '--set-origin-url/-o URL'
  --help/-h               Display this help text and then exit
  --usage                 Display usage examples and then exit
  --version/-v            Prints version and then exit

Installation options:
  --custom-install        Configure xadf to load from a non-xadf bare git repository.
                          Specify custom git directory with '--seat DIR' option.
  --minimal-install       Install only core xadf (honors '--branch/b BRANCH' option).
                          If BRANCH is set, uses xadf original repo's BRANCH (defaults to 'trunk')
  --install/-i            Installs and sets up xadf repository to user's \$HOME
  --seat DIR              Sets xadf git directory to DIR. Default: \$HOME/xadf
                          Should be used with '--install/-i', '--custom-install' and/or '--build-xadfrc/-x'
  --branch/-b BRANCH      Sets active git branch in \$HOME to BRANCH. Default: trunk
                          Should be used with option '--install/-i' and/or '--minimal-install'.
                          If xadf is configured, use 'xadf switch BRANCH' instead.
  --clone-source/-s URL   Sets a custom git repository URL to clone from during install.
                          Should be used with option '--install/-i'.

ENDOFFILE
# $(printf "%s\n" "$install_seat"|sed 's#$HOME#\$HOME#')                          
}

# Parses all arguments as git arguments
xadf_git(){
	test -n "$xadfdir" && git --git-dir="$xadfdir" --work-tree="$HOME" "$@"
}

# Option parser
while :; do
	case $1 in
		# One-off options (immediately exit after matched)
		-l | --list-tree )
			# Note that it may also expect to be provided arguments, for example to
			# specify which file or directory do we want to see (just like ls in some
			# ways).
			shift
			xadf_git ls-tree --full-tree -r --name-only HEAD "$@"
			exit 0
			;;
		-h | --help ) # show help text, then exit
			shift
			xadf_show_help
			exit 0
			;;
		--usage ) # show usage text, then exit
			shift
			xadf_show_usage
			exit 0
			;;
		-v | --version ) # show version, then exit
			shift
			xadf_version
			exit 0
			;;
		# Functions that modify script states but does not immediately break
		-i | --install ) # performs xadf install
			export install_mode=1
			shift
			;;
		--custom-install ) # performs custom xadf install
			export install_mode=2
			shift
			;;
		--minimal-install ) # performs custom xadf install
			export install_mode=3
			shift
			;;
		--seat ) # set git dir to DIR
			if test -z "$2"
			then
				printf >&2 "Error: No directory is set!\nUsage: xadf -h\n\n"
				exit 1
			else
				export install_seat="$(realpath $2)"
				shift 2
			fi
			;;
		-b | --branch ) # sets checked out branch
			if test -z "$2"
			then
				printf >&2 "Error: No branch is set\nUsage: xadf -h\n\n"
				exit 2
			else
				export install_branch="$2"
				shift 2
			fi
			;;
		-r | --build-recipe ) # builds recipe.txt
			export build_recipe=1
			shift
			;;
		-x | --build-xadfrc ) # builds xadfrc
			export build_xadfrc=1
			shift
			;;
		-t | --touch-bashrc )
			export touch_bashrc=1
			shift
			;;
		--init-bare )
			export init_bare=1
			shift
			;;
		--xadf-repo ) # changes upstream url
			export vanilla_xadf=1
			shift
			;;
		-o | --set-origin-url ) # changes upstream url
			if test -z "$2"
			then # prints error if no url is provided
				printf >&2 "Error: No custom url is set\nUsage: xadf -h\n\n"
				exit 14
			else # export states and set url then shift arguments				
				export set_origin_url=1
				export xadf_set_url="$2"
				shift 2
			fi
			;;
		-s | --clone-source ) # changes clone source url
			if test -z "$2"
			then # prints error if no url is provided
				printf >&2 "Error: No custom url is set\nUsage: xadf -h\n\n"
				exit 15
			else # export custom url then shift arguments
				export xadf_clone_url="$2"
				shift 2
			fi
			;;
		# Modifiers for default git alias
		-c | --custom-seat )
			if test -z "$2"
			then # prints error when no seat location is set
				printf >&2 "Error: No custom seat is set\nUsage: xadf -h\n\n"
				exit 13
			else # shift arguments to just git commands, then run git, and exit
				export install_seat="$(realpath $2)"
				# Makes xadf_git() usable for this purpose
				export xadfdir="$install_seat"
				shift 2
				# git --git-dir="$install_seat" --work-tree="$HOME" "$@"
				xadf_git "$@"
				exit 0
			fi
			;;
        # Stop parsing xadf arguments and consider the rest as git arguments
        -- )
            shift
			xadf_git "$@"
            break
            ;;
		# general matching for all other cases
		-* ) # invalid options
			printf >&2 "Error: Invalid flag '%s'\nUsage: xadf -h\n\n" "$1"
			shift
			exit 3
			;;
		"" ) # No options
			break
			;;
		* ) # Practically a git alias with separate git dir
			# If $xadfdir is not set, then fail
			xadf_git "$@"
			break
			;;
	esac
done

# Main section
# Check state variables, and decide what function to call.

if test $init_bare -eq 1
then
	xadf_init_bare
fi

if test $install_mode -eq 1
then
	xadf_install
elif test $install_mode -eq 2
then
	xadf_custom_install
elif test $install_mode -eq 3
then
	xadf_minimal_install
fi

if test $build_recipe -eq 1
then
	xadf_build_recipe
fi

if test $build_xadfrc -eq 1
then
	xadf_build_xadfrc
fi

if test $touch_bashrc -eq 1
then
	xadf_touch_bashrc
fi

if test $vanilla_xadf -eq 1 || test $set_origin_url -eq 1
then
	xadf_touch_origin
fi
